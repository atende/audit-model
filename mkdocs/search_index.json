{
    "docs": [
        {
            "location": "/", 
            "text": "Audit Model\n\n      \nA model for AuditEvents in project Audition\n\n      \nView on GitHub\n\n      \nDownload .zip\n\n      \nDownload .tar.gz\n\n\n\n\n\nAbout\n\n\nThis project represents a model for events transmited, serialized and persisted in the audit project\n\n\nFor more information about the project \nAudit Project\n\n\nThe AuditEvent Object\n\n\n\n\n\n\n\n\nField\n\n\nDescription\n\n\nConstraints\n\n\n\n\n\n\n\n\n\n\nid\n\n\nThe id is auto generated by the storage\n\n\n\n\n\n\n\n\napplicationName\n\n\nA identification of the application. You should take care that each application must have a unique applicationName across the others\n\n\nNot null\n\n\n\n\n\n\nuserName\n\n\nWho make the action? Normally the user name of the current login in user\n\n\nNot null\n\n\n\n\n\n\naction\n\n\nWhat happen? The action must identify what happen in the event, it should be a verb, it should be standardized, after all someone will search for that\n\n\nNot null\n\n\n\n\n\n\nresource.resouceType\n\n\nThe resource represents, what or who has been affected by the action. Resource type is the class of resources. Example: person\n\n\nNot null\n\n\n\n\n\n\nresource.resourceId\n\n\nThe resource id represents the unity that has been affected by the action. Example: 123 Multiple values uses ; to separate. Example 123;456\n\n\nNot null\n\n\n\n\n\n\ndateTime\n\n\nWhen the event was generated.\n\n\nNot null\n\n\n\n\n\n\nip\n\n\nThe ip address of the client machine for the user that generate the event.\n\n\n\n\n\n\n\n\nsecurityLevel\n\n\nA way to classify the severity of the event. Only supports 3 values: LOW, NORMAL, HIGHT\n\n\n\n\n\n\n\n\ndescription\n\n\nA optional description of the event, or could be used for other information\n\n\n\n\n\n\n\n\n\n\nWith that object you can interpret a AuditEvent as this (order of the table above)\n\n\nSGL - fooUser - ldap_enable - person - 123 - Sat May 21 08:14:59 - 10.0.1.1 - NORMAL -\n\n\n\nThat line means user fooUser in the application SGL has enable in ldap the person 123 on Sat May 21 08:14:59, the user was in the machine 10.0.1.1 and this is a normal operation\n\n\nIs crucial that the actions should be standardized and the resources too. Some actions are common across every applications, some makes sense\nonly for a particular app. \n\n\nThe underline should be used to separate the concerns. In the exemplo above \nldap_enable\n separates the actual action \nenable\n for a more specific\naction \nldap\n. That means the user has enable in some ldap respository, not that the user has enabled in the application itself.\n\n\nOther examples:\n\n\n\n\ndatabase_insert - An insert in the database\n\n\ndatabase_update - An update in the database\n\n\ndatabase_delete - A delete in the database\n\n\ndatabase_select - A select in the database\n\n\ndatabase_insert_or_update - A insert or update operation in database\n\n\nuser_login - The user has login\n\n\nuser_logout - The user has logout\n\n\nuser_enable - The user has been enabled\n\n\nldap_create - The ldap object has been created\n\n\nldap_read - The ldap object has been readed\n\n\nldap_change_password - The ldap password of the object has been changed\n\n\n\n\nIf a action is specific for the application, use the name of application as a prefix. Example \nsgl_reset_password\n\n\nIt is entire possible to persist a non standardize json object in the future", 
            "title": "Home"
        }, 
        {
            "location": "/#about", 
            "text": "This project represents a model for events transmited, serialized and persisted in the audit project  For more information about the project  Audit Project", 
            "title": "About"
        }, 
        {
            "location": "/#the-auditevent-object", 
            "text": "Field  Description  Constraints      id  The id is auto generated by the storage     applicationName  A identification of the application. You should take care that each application must have a unique applicationName across the others  Not null    userName  Who make the action? Normally the user name of the current login in user  Not null    action  What happen? The action must identify what happen in the event, it should be a verb, it should be standardized, after all someone will search for that  Not null    resource.resouceType  The resource represents, what or who has been affected by the action. Resource type is the class of resources. Example: person  Not null    resource.resourceId  The resource id represents the unity that has been affected by the action. Example: 123 Multiple values uses ; to separate. Example 123;456  Not null    dateTime  When the event was generated.  Not null    ip  The ip address of the client machine for the user that generate the event.     securityLevel  A way to classify the severity of the event. Only supports 3 values: LOW, NORMAL, HIGHT     description  A optional description of the event, or could be used for other information      With that object you can interpret a AuditEvent as this (order of the table above)  SGL - fooUser - ldap_enable - person - 123 - Sat May 21 08:14:59 - 10.0.1.1 - NORMAL -  That line means user fooUser in the application SGL has enable in ldap the person 123 on Sat May 21 08:14:59, the user was in the machine 10.0.1.1 and this is a normal operation  Is crucial that the actions should be standardized and the resources too. Some actions are common across every applications, some makes sense\nonly for a particular app.   The underline should be used to separate the concerns. In the exemplo above  ldap_enable  separates the actual action  enable  for a more specific\naction  ldap . That means the user has enable in some ldap respository, not that the user has enabled in the application itself.  Other examples:   database_insert - An insert in the database  database_update - An update in the database  database_delete - A delete in the database  database_select - A select in the database  database_insert_or_update - A insert or update operation in database  user_login - The user has login  user_logout - The user has logout  user_enable - The user has been enabled  ldap_create - The ldap object has been created  ldap_read - The ldap object has been readed  ldap_change_password - The ldap password of the object has been changed   If a action is specific for the application, use the name of application as a prefix. Example  sgl_reset_password  It is entire possible to persist a non standardize json object in the future", 
            "title": "The AuditEvent Object"
        }, 
        {
            "location": "/project_setup/", 
            "text": "To use the model in your project, you can setup gradle, maven, sbt or other build systems with a dependency on the library\n\n\nIf you use some framework dependency like \naudit-appclient-spring\n it already depends on this project.\n\n\nGradle\n\n\ncompile(\"info.atende.audition:audit-model:$auditModelVersion\")\n\n\n\nMaven\n\n\ndependency\n\n  \ngroupId\ninfo.atende.audition\n/groupId\n\n  \nartifactId\naudit-model\n/artifactId\n\n  \nversion\n${auditModelVersion}\n/version\n\n\n/dependency\n\n\n\n\nSBT\n\n\nlibraryDependencies += \"info.atende.audition\" % \"audit-model\" % \"$auditModelVersion\"", 
            "title": "Project Setup"
        }, 
        {
            "location": "/actions/", 
            "text": "A action represents what happens in the event, it should be standardized\n\n\nThe action is a string in the formart: \nconcern_action_verb\n\n\nFor example: \nldap_password_change\n or \nldap_enable\n\n\nThe underline should be used to separate the concerns. In the exemplo above \nldap_enable\n separates the actual action \nenable\n for a more specific\naction \nldap\n. That means the user has enable in some ldap respository, not that the user has enabled in the application itself.\n\n\nOther examples:\n\n\n\n\ndatabase_insert - An insert in the database\n\n\ndatabase_update - An update in the database\n\n\ndatabase_delete - A delete in the database\n\n\ndatabase_select - A select in the database\n\n\ndatabase_insert_or_update - A insert or update operation in database\n\n\nuser_login - The user has login\n\n\nuser_logout - The user has logout\n\n\nuser_enable - The user has been enabled\n\n\nldap_create - The ldap object has been created\n\n\nldap_read - The ldap object has been readed\n\n\nldap_change_password - The ldap password of the object has been changed\n\n\n\n\nThe Package \ninfo.atende.audition.model.actions\n contains standard actions for every application.\nEach standard action in this package is a Java Enum. When using the Enum you should pass the toString() method as\nto the event. The to string method created the prefix format that you see above\n\n\nExample: \n\n\nResource person = new Resource(\"person\", \"1234\");\nAuditEvent event = new AuditEvent(\"application\",\"fooUser\", DatabaseAction.DELETE, person, LocalDateTime.now(), \"10.10.4.3\", SecurityLevel.NORMAL);", 
            "title": "Actions"
        }, 
        {
            "location": "/resources/", 
            "text": "The resource represents, what or who has been affected by the action. Is composed of \nresourceType\n and \nresourceId\n\n\nResource type\n is the class of resources. Example: person\n\n\nThe \nresource id\n represents the unity that has been affected by the action. Example: 123 Multiple values uses ; to separate. Example 123;456  \n\n\nCode Example:\n\n\nResource resource = new Resource(\"person\",\"1234\");\nResource resource2 = new Resource(\"person\", \"1234\",\"567\");\nResource resource3 = new Resource(\"person\");\nresource3.setResourceIds(\"1234\",\"567\");\nresource2.setResourceId(\"12345\");\n\n\n\nSometimes the ID in not applicable. For example, when the  resources represent the entire block of class. In that cases\nthe resource id should be the string \nNOT_APPLICABLE\n. The Resource class set this if no resourceId is added", 
            "title": "Resources"
        }
    ]
}